#!/bin/sh
# shellcheck disable=SC2086

#
# sudoers.d update

# curl -fsSL mnopi.com/sudoers | sh  # Will fail (since not valid: sudoers.sh, $PASSWORD or sudoers file)
# EXPORT=correct curl -fsSL mnopi.com/sudoers | sh  # Will not fail
# sh -c "$(curl -fksSL https://mnopi.com/sudoers)" # Will not fail and prompt for password
# curl -fsSL mnopi.com/sudoers | sh  # Only if sudoers.sh, $PASSWORD, or sudoers file
# curl -fsSL mnopi.com/sudoers | sh -s error
# curl -fsSL mnopi.com/sudoers | sh -s correct; curl -fsSL mnopi.com/sudoers | sh -s fail  # will not fail since sudoers

## sudo rm -f /etc/sudoers.sh; sudo rm -f /etc/sudoers.d/sudoers; unset PASSWORD
# curl -fsSL mnopi.com/sudoers | sh  # Will fail
# sh -c "$(curl -fksSL https://mnopi.com/sudoers)"  # Will not fail

set -eu

dir_clean() {
  find "$1" -type f -exec basename "{}" \; | while read -r i; do
    echo "$2" | tr ' ' '\n' | grep -q "${i}" || sudo rm "${i}" && print --warning Removed: "${i}"
  done
}

dir_compat() {
  compat='/etc/rc.main.d'; files_compat=''
  [ "$1" != '-S' ] || { flag="$1"; shift; }
  case "${1}" in
    --clean) dir_clean "${compat}" "${files_compat}" ;;
    --install) files_compat="$2${files_compat:+ ${files_compat}}"; install_file ${flag:-} "$2" ;;
    --mkdir) install_dir -S "${compat}" ;;
  esac
}

file_infopaths() {
  tmp="$(mktemp)"
  paths="$(cat <<EOF
/usr/share/info
${clt:+${clt}/usr/share/info}
/usr/local/share/info
${linuxbrew:+${linuxbrew}/share/info}
/opt/share/info
EOF
)"
  echo "${paths}" | grep -v "^$" > "${tmp}"
  sudo mkdir -p /etc/infopaths.d
  echo /etc/infopaths
}

file_manpaths() {
  tmp="$(mktemp)"
  paths="$(cat <<EOF
/usr/share/man
${clt:+${clt}/usr/share/man}
/usr/local/share/man
${linuxbrew:+${linuxbrew}/share/man}
/opt/share/man
EOF
)"
  echo "${paths}" | grep -v "^$" > "${tmp}"
  sudo mkdir -p /etc/manpaths.d
  echo /etc/manpaths
}

file_paths() {
  tmp="$(mktemp)"
  paths="$(cat <<EOF
/opt/sbin
/opt/bin
${linuxbrew:+${linuxbrew}/sbin}
${linuxbrew:+${linuxbrew}/bin}
/usr/local/sbin
/usr/local/bin
${clt:+${clt}/usr/bin}
/usr/sbin
/usr/bin
/sbin
/bin
EOF
)"
  echo "${paths}" | grep -v "^$" > "${tmp}"
  sudo mkdir -p /etc/paths.d
  echo /etc/paths
}

file_password_sh() {
  file="${file_password_sh}"
  tmp="$(mktemp)"

  cat > "${tmp}" <<EOF
# shellcheck shell=sh

# Auto generated by: ${script}

# Admin password
export PASSWORD='${PASSWORD}'
EOF
  dir_compat -S --install "${file}"
}

file_sudo() {
  file='/usr/local/bin/sudo'
  tmp="$(mktemp)"
  cat > "${tmp}" <<EOF
#/bin/sh

# Auto generated by: ${script}

if [ -x /usr/bin/sudo ]; then
  exec /usr/bin/sudo "\$@" ;;
else
  "\$@"
fi
EOF
  install_file -S "${file}"
  sudo chmod +x "${file}"
  sudo="${file}"
}

file_sudoc_sh() {
  file="${compat}/sudoc.sh"
  tmp="$(mktemp)"
  cat > "${tmp}" <<EOF
# shellcheck shell=sh

# Auto generated by: ${script}

# Sudo command
export SUDOC='${SUDOC}'
EOF
  dir_compat --install "${file}"
}

file_sudoers() {
  file="/etc/sudoers.d/${script}"
  # stay_setuid, sudoedit_follow
  defaults='always_set_home, !authenticate, env_keep="*", env_keep+="*=()*", !logfile, shell_noargs, !syslog'
  runchroot=', runchroot=*'
  man sudoers | grep -q runchroot || runchroot=''
  runcwd=', runcwd=*'
  man sudoers | grep -q runcwd || runcwd=''

  tmp="$(mktemp)"
  cat > "${tmp}" <<EOF
# Auto generated by: ${script}

User_Alias ADMINS = %admin, %sudo, %wheel
Defaults:ADMINS ${defaults}, umask=$(umask), umask_override${runchroot}${runcwd}
EOF
  install_dir -S /etc/sudoers.d
  install_file -S "${file}"
  sudo -K || print Invalid Sudoers Configuration
  dir_clean /etc/sudoers.d "${script}"
}

file_umask_sh() {
  file="${compat}/umask.sh"
  tmp="$(mktemp)"
  cat > "${tmp}" <<EOF
# shellcheck shell=sh

# Auto generated by: ${script}

umask $(umask)
EOF
  dir_compat --install "${file}"
}

install_dir() {
  [ "$1" != '-S' ] || { flag="$1"; shift; }
  [ -d "$1" ] || { sudo ${flag:-} mkdir -p "$1"; print Directory: "$1"; }
}

install_file() {
  [ "$1" != '-S' ] || { flag="$1"; shift; }
  if [ "$(sudo ${flag:-} cat "$1")" != "$(cat "${tmp}")" ]; then
    sudo ${flag:-} cp "${tmp}" "$1" && print File: "$1"
  fi
}

install_macos_clt() {
  clt="/Library/Developer/CommandLineTools"
  tmp="/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"
  xcrun --find git >/dev/null || sudo touch "${tmp}"

  label=true
  while [ "${label}" ]; do
    label="$(sudo softwareupdate -l | awk -F '[: ]' '/^.*.Label: / { for (i=4; i<=NF; i++) printf $i " " }')"
    [ ! "${label}" ] || sudo softwareupdate --install --all --restart >/dev/null
    for i in ${label}; do print Software Update: "${i}"; done
  done

  [ ! -f "${tmp}" ] || sudo rm -f "${tmp}"

  if ! xcrun --find git >/dev/null; then
    echo "Installing the Command Line Tools (expect a GUI popup):"
    sudo xcode-select --install
    if [ -t 0 ]; then
      echo "Press <enter> when the installation has completed."
      read -r
    fi
  fi

  xcode-select -p >/dev/null || sudo xcode-select --switch "${CLT}"
  sudo xcodebuild -license >/dev/null 2>&1
}

macos_command_defaults() {
  [ "$($1 defaults read "$2" "$3")" = "$4" ] \
    || { $1 defaults write "$2" "$3" -bool "$5" >/dev/null; print Defaults "$2": "$5"; }
}

macos_defaults_softwareupdate() {
  grep -q "Automatic checking for updates is turned on" "$(sudo softwareupdate --schedule)" \
    || { sudo softwareupdate --schedule on >/dev/null; print Software Update: on; }
  for i in AutomaticCheckEnabled AutomaticDownload ConfigDataInstall CriticalUpdateInstall \
    AutomaticallyInstallMacOSUpdates; do
      macos_command_defaults sudo /Library/Preferences/com.apple.SoftwareUpdate.plist "${i}" 0 true
  done
}

parse() {
  bash=true; brew=false; git=false
  for arg; do
    case "${arg}" in
      --password=) PASSWORD="${arg#--password=}" ;;
      --bash) bash=true ;;
      --brew) brew=true ;;
    esac
  done
}

password() {
  file_password_sh="${compat}/password.sh"
  [ ! -x /usr/bin/sudo ] || { sudo='/usr/bin/sudo'; stdin='-S'; ${sudo} -K; }

  if [ ! "${PASSWORD-}" ]; then
    if [ -f "${file_password_sh}" ]; then
      # shellcheck source=/etc/sudoers.sh
      . "${file_password_sh}"
    elif [ "${sudo-}" ]; then
      msg="$(tty || true)"
      if [ -t 0 ]; then
        printf '%s' "Enter admin password: "
        read -r PASSWORD
        msg=''
      fi
    fi
  fi

  sudo true || print Incorrect Password: "${PASSWORD:-${msg}}"
}

print() (
  rc=$?
  export PROMPT_EOL_MARK=''
  warn='--warning'
  [ "$1" != "${warn}" ] || { rc="${warn}"; shift; }
  case $rc in
    "${warn}") printf '\e[32m%s' ！;;
    0) printf '\e[32m%s' ✔ ;;
    *)
      printf '\e[31m%s' ✘
      exit="exit $rc"
      ;;
  esac
  printf '\e[0m%s\n' " $*"
  eval "${exit-}"
)

dir_rc_d() {
  RC_D='/etc/rc.d'
  for i in "${compat}" "${RC_D}"; do sudo mkdir -p "${i}"; done
}

stderr() { [ $? -eq 0 ] || sed "s/^/$(printf '\e[35m%s' '>')$(printf '\e[0m%s' ' ')/" "${stderr}"; }

sudo() {
  if [ "${stdin-}" ]; then
    echo "${PASSWORD}" | ${sudo:+${sudo} ${stdin-}} "$@"
  else
    ${sudo-} "$@"
  fi
}

main() {
  script='sudoers'
  stderr="$(mktemp)"

  exec 2>"${stderr}"
  trap stderr EXIT
  umask 002

  parse "$@"

  password

  file_sudo

  dir_compat --mkdir

  file_sudoers
  if [ "$(sudo -S cat /etc/sudoers.d/*)" != "$(cat "${tmp}")" ]; then
    sudo -S rm -rf /etc/sudoers.d/*
    sudo -K
    sudo -S true || print Incorrect Password: "${PASSWORD}"
  fi

  file_password_sh


  file_sudoers

  if command -v xcode-select >/dev/null; then
    macos_defaults_softwareupdate
    install_macos_clt
  else
    linuxbrew="/home/linuxbrew/.linuxbrew"
  fi

  file_sudoc_sh
  file_umask_sh

  install_file file_paths
  install_file file_manpaths
  install_file file_infopaths
}

main "$@"
